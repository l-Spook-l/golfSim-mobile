package com.example.golfsimmobile

import android.app.Activity
import android.content.Context
import android.hardware.camera2.CameraDevice
import android.os.Handler
import android.util.Log
import android.view.TextureView
import android.widget.ImageView
import org.opencv.android.Utils
import org.opencv.core.Core
import org.opencv.core.Mat
import org.opencv.core.MatOfPoint
import org.opencv.core.Scalar
import org.opencv.imgproc.Imgproc
import java.util.ArrayList

class BallDetector(
    private val context: Context,
    private val textureView: TextureView,
    private val imageView: ImageView,
    private val onRecordingStopped: () -> Unit // –∫–æ–ª–±—ç–∫
) {
    private lateinit var videoRecorder: VideoRecorder
    private var isRecording = false
    private var wasRecording = false
    private var ballDetected = false
    private var ballDetectionStartTime: Long = 0
    private var ballDetectionStopTime: Long = 0
    private var hsvFetcher: HSVFetcher? = null

    fun initCamera(cameraDevice: CameraDevice, handler: Handler) {
        videoRecorder = VideoRecorder(context, textureView, cameraDevice, handler)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è hsvVals
    private var hsvVals = mapOf(
        "hmin" to 0,
        "smin" to 0,
        "vmin" to 0,
        "hmax" to 255,
        "smax" to 255,
        "vmax" to 255
    )

    fun reset() {
        isRecording = false
        wasRecording = false
        ballDetected = false
    }

    fun clearOverlay() {
        if (context is Activity) {
            context.runOnUiThread {
                imageView.setImageBitmap(null)  // –û—á–∏—Å—Ç–∏–º ImageView
            }
        }
    }

    fun updateHsvValues(newHsvVals: Map<String, Int>) {
        Log.d("BallDetector", "–ù–æ–≤—ã–µ HSV –∑–Ω–∞—á–µ–Ω–∏—è: $newHsvVals")
        if (hsvVals == newHsvVals) {
            Log.d("BallDetector", "HSV –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        } else {
            Log.d("BallDetector", "HSV –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
            hsvVals = newHsvVals
        }
    }

    fun startHsvFetching() {
        hsvFetcher = HSVFetcher("http://192.168.50.107:8000/get-hsv") { hsvMap ->
            updateHsvValues(hsvMap)
        }
        hsvFetcher?.startFetching()
    }

    fun stopHsvFetching() {
        hsvFetcher?.stopFetching()
    }

    fun processFrame(mode: String){
        if (!::videoRecorder.isInitialized) {
            Log.e("BallDetector", "VideoRecorder not initialized")
            return
        }

        val bitmap = textureView.bitmap ?: return
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Bitmap –≤ Mat –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é OpenCV
        val mat = Mat()
        Utils.bitmapToMat(bitmap, mat)

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ HSV –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–µ–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
        Imgproc.cvtColor(mat, mat, Imgproc.COLOR_RGB2HSV)

        // –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ü–≤–µ—Ç–∞
        val lowerYellow = Scalar(hsvVals["hmin"]!!.toDouble(), hsvVals["smin"]!!.toDouble(), hsvVals["vmin"]!!.toDouble())
        val upperYellow = Scalar(hsvVals["hmax"]!!.toDouble(), hsvVals["smax"]!!.toDouble(), hsvVals["vmax"]!!.toDouble())

        val mask = Mat()

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–µ–ª—è–µ—Ç –∂–µ–ª—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏
        Core.inRange(mat, lowerYellow, upperYellow, mask)

        // –ù–æ–≤—ã–π —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        val blackMat = Mat.zeros(mat.size(), mat.type())

        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É –Ω–∞ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∂–µ–ª—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
        mat.copyTo(blackMat, mask)

        // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤ –Ω–∞ –º–∞—Å–∫–µ
        val contours = ArrayList<MatOfPoint>()
        val hierarchy = Mat()
        Imgproc.findContours(mask, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE)

        var ballDetectedInCurrentFrame = false

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
        for (contour in contours) {
            val boundingRect = Imgproc.boundingRect(contour)
            // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            Imgproc.rectangle(blackMat, boundingRect, Scalar(255.0, 0.0, 0.0), 2)
            // –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –º—è—á
            if (boundingRect.width > 50 && boundingRect.height > 50) {
                ballDetectedInCurrentFrame = true
            }
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Bitmap –∏ –æ–±–Ω–æ–≤–ª—è–µ–º ImageView
        Utils.matToBitmap(blackMat, bitmap)
        if (context is Activity) {
            context.runOnUiThread {
                imageView.setImageBitmap(bitmap)
            }
        }

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        mat.release()
        mask.release()
        hierarchy.release()
        blackMat.release()

        when (mode) {
            "game" -> {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
                if (ballDetectedInCurrentFrame) {
                    if (!ballDetected) {
                        ballDetectionStartTime = System.currentTimeMillis()
                        ballDetected = true
                    } else if (System.currentTimeMillis() - ballDetectionStartTime > 1500) {
                        if (!isRecording) {
                            videoRecorder.startRecording()
                            isRecording = true
                            wasRecording = true
                        }
                    }
                } else {
                    if (ballDetected) {
                        ballDetectionStopTime = System.currentTimeMillis()
                        ballDetected = false
                    } else if (System.currentTimeMillis() - ballDetectionStopTime > 1500) {
                        if (isRecording) {
                            videoRecorder.stopRecording()
                            videoRecorder.uploadVideo() // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
                            isRecording = false

                            // üí° –í—ã–∑–æ–≤ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
                            onRecordingStopped()
                            wasRecording = false
                        }
                    }
                }
            }
        }
    }
}